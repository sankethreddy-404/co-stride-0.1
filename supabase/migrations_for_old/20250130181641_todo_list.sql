create table "public"."todo_list" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "urgent" boolean not null default false,
    "description" text,
    "done" boolean not null default false,
    "done_at" timestamp with time zone,
    "owner" uuid not null
);


alter table "public"."todo_list" enable row level security;

CREATE UNIQUE INDEX todo_list_pkey ON public.todo_list USING btree (id);

alter table "public"."todo_list" add constraint "todo_list_pkey" PRIMARY KEY using index "todo_list_pkey";

alter table "public"."todo_list" add constraint "todo_list_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."todo_list" validate constraint "todo_list_owner_fkey";

grant delete on table "public"."todo_list" to "anon";

grant insert on table "public"."todo_list" to "anon";

grant references on table "public"."todo_list" to "anon";

grant select on table "public"."todo_list" to "anon";

grant trigger on table "public"."todo_list" to "anon";

grant truncate on table "public"."todo_list" to "anon";

grant update on table "public"."todo_list" to "anon";

grant delete on table "public"."todo_list" to "authenticated";

grant insert on table "public"."todo_list" to "authenticated";

grant references on table "public"."todo_list" to "authenticated";

grant select on table "public"."todo_list" to "authenticated";

grant trigger on table "public"."todo_list" to "authenticated";

grant truncate on table "public"."todo_list" to "authenticated";

grant update on table "public"."todo_list" to "authenticated";

grant delete on table "public"."todo_list" to "service_role";

grant insert on table "public"."todo_list" to "service_role";

grant references on table "public"."todo_list" to "service_role";

grant select on table "public"."todo_list" to "service_role";

grant trigger on table "public"."todo_list" to "service_role";

grant truncate on table "public"."todo_list" to "service_role";

grant update on table "public"."todo_list" to "service_role";

create policy "Owner can do everything"
on "public"."todo_list"
as permissive
for all
to authenticated
using ((auth.is_user_authenticated() AND (owner = auth.uid())));



